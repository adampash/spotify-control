{"version":3,"sources":["../src/index.js"],"names":["SpotifyWebApi","require","moment","getAccessToken","refreshAccessToken","spotifyApi","REFRESHED_TOKEN","retryWithRefresh","fn","e","console","log","spotifyClient","token","setAccessToken","selectDevice","device","client","result","transferMyPlayback","deviceIds","id","play","toggleDevice","response","getMyDevices","body","devices","stereo","find","name","toLowerCase","startsWith","process","env","STEREO","local","LOCAL","is_active","toggleError","monthlyPlaylistName","format","getMonthlyPlaylist","userId","items","playlists","getUserPlaylists","playlist","createPlaylist","addToMonthlyPlaylist","item","uri","trackUri","getMyCurrentPlayingTrack","getMe","playlistId","tracks","getPlaylistTracks","track","addTracksToPlaylist","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const SpotifyWebApi = require('spotify-web-api-node');\nconst moment = require('moment');\nconst { getAccessToken, refreshAccessToken } = require('./auth');\n\nconst spotifyApi = new SpotifyWebApi();\nlet REFRESHED_TOKEN = false;\nconst retryWithRefresh = fn => async () => {\n  try {\n    await fn();\n  } catch (e) {\n    console.log(`ERROR on first try`, e);\n    if (REFRESHED_TOKEN) return;\n    console.log('Trying to refresh token');\n    REFRESHED_TOKEN = true;\n    await refreshAccessToken();\n    await fn();\n  }\n};\n\nconst spotifyClient = async () => {\n  try {\n    const token = await getAccessToken();\n    await spotifyApi.setAccessToken(token);\n    return spotifyApi;\n  } catch (e) {\n    console.log(`ERROR setting up client`, e);\n  }\n};\n\nconst selectDevice = async device => {\n  try {\n    const client = await spotifyClient();\n    const result = await client.transferMyPlayback({\n      deviceIds: [device.id],\n      play: true,\n    });\n  } catch (e) {\n    console.log(`Error in selectDevice`, e);\n  }\n};\n\nconst toggleDevice = retryWithRefresh(async () => {\n  try {\n    const client = await spotifyClient();\n    const response = await client.getMyDevices();\n    const { body: { devices } } = response;\n    const stereo = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.STEREO)\n    );\n    const local = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.LOCAL)\n    );\n    selectDevice(local.is_active ? stereo : local);\n  } catch (toggleError) {\n    console.log(`toggleError`, toggleError);\n    throw toggleError;\n  }\n});\n\nconst monthlyPlaylistName = moment().format('MMMM YYYY');\nconst getMonthlyPlaylist = (log = false) =>\n  retryWithRefresh(async userId => {\n    const client = await spotifyClient();\n    const { body: { items: playlists } } = await client.getUserPlaylists(\n      userId\n    );\n    const playlist =\n      playlists.find(({ name }) => monthlyPlaylistName === name) ||\n      (await client.createPlaylist(userId, monthlyPlaylistName));\n    if (log) console.log(playlist.id);\n    return playlist.id;\n  });\n\nconst addToMonthlyPlaylist = retryWithRefresh(async () => {\n  const client = await spotifyClient();\n  const {\n    body: { item: { uri: trackUri } },\n  } = await client.getMyCurrentPlayingTrack();\n  const { body: { id: userId } } = await client.getMe();\n  const { body: { items: playlists } } = await client.getUserPlaylists(userId);\n  const playlistId = await getMonthlyPlaylist()(userId);\n  const { body: { items: tracks } } = await client.getPlaylistTracks(\n    userId,\n    playlistId\n  );\n  if (tracks.find(({ track: { uri } }) => uri === trackUri)) return;\n  await client.addTracksToPlaylist(userId, playlistId, [trackUri]);\n});\n\nmodule.exports = {\n  'toggle-device': toggleDevice,\n  'add-to-monthly-playlist': addToMonthlyPlaylist,\n  'get-monthly-playlist': getMonthlyPlaylist(true),\n};\n"]}