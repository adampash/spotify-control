{"version":3,"sources":["../src/index.js"],"names":["SpotifyWebApi","require","moment","getAccessToken","refreshAccessToken","spotifyApi","REFRESHED_TOKEN","retryWithRefresh","fn","args","loadedFn","e","console","log","spotifyClient","token","setAccessToken","selectDevice","device","client","result","transferMyPlayback","deviceIds","id","play","startDevice","deviceName","response","getMyDevices","body","devices","stereo","find","name","toLowerCase","startsWith","process","env","STEREO","toggleError","toggleDevice","local","LOCAL","is_active","monthlyPlaylistName","format","getMonthlyPlaylist","userId","items","playlists","getUserPlaylists","playlist","createPlaylist","addToMonthlyPlaylist","item","uri","trackUri","getMyCurrentPlayingTrack","getMe","playlistId","tracks","getPlaylistTracks","track","addTracksToPlaylist","setVolume","percent","pause","options","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const SpotifyWebApi = require('spotify-web-api-node');\nconst moment = require('moment');\nconst { getAccessToken, refreshAccessToken } = require('./auth');\n\nconst spotifyApi = new SpotifyWebApi();\nlet REFRESHED_TOKEN = false;\nconst retryWithRefresh = fn => async (...args) => {\n  const loadedFn = () => fn(...args);\n  try {\n    return await loadedFn();\n  } catch (e) {\n    console.log(`ERROR on first try`, e);\n    if (REFRESHED_TOKEN) return;\n    console.log('Trying to refresh token');\n    REFRESHED_TOKEN = true;\n    await refreshAccessToken();\n    return await loadedFn();\n  }\n};\n\nconst spotifyClient = async () => {\n  try {\n    const token = await getAccessToken();\n    await spotifyApi.setAccessToken(token);\n    return spotifyApi;\n  } catch (e) {\n    console.log(`ERROR setting up client`, e);\n  }\n};\n\nconst selectDevice = async device => {\n  try {\n    const client = await spotifyClient();\n    const result = await client.transferMyPlayback({\n      deviceIds: [device.id],\n      play: true,\n    });\n  } catch (e) {\n    console.log(`Error in selectDevice`, e);\n  }\n};\n\nconst startDevice = retryWithRefresh(async (deviceName) => {\n  try {\n    const client = await spotifyClient();\n    const response = await client.getMyDevices();\n    const { body: { devices } } = response;\n    const stereo = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(deviceName || process.env.STEREO)\n    );\n    selectDevice(stereo);\n  } catch (toggleError) {\n    console.log(`toggleError`, toggleError);\n    throw toggleError;\n  }\n});\n\nconst toggleDevice = retryWithRefresh(async () => {\n  try {\n    const client = await spotifyClient();\n    const response = await client.getMyDevices();\n    const { body: { devices } } = response;\n    const stereo = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.STEREO)\n    );\n    const local = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.LOCAL)\n    );\n    selectDevice(local.is_active ? stereo : local);\n  } catch (toggleError) {\n    console.log(`toggleError`, toggleError);\n    throw toggleError;\n  }\n});\n\nconst monthlyPlaylistName = moment().format('MMMM YYYY');\nconst getMonthlyPlaylist = (log = false) =>\n  retryWithRefresh(async userId => {\n    const client = await spotifyClient();\n    const { body: { items: playlists } } = await client.getUserPlaylists(\n      userId\n    );\n    const playlist =\n      playlists.find(({ name }) => monthlyPlaylistName === name) ||\n      (await client.createPlaylist(userId, monthlyPlaylistName));\n    if (log) console.log(playlist.id);\n    return playlist.id;\n  });\n\nconst addToMonthlyPlaylist = retryWithRefresh(async () => {\n  const client = await spotifyClient();\n  const {\n    body: { item: { uri: trackUri } },\n  } = await client.getMyCurrentPlayingTrack();\n  const { body: { id: userId } } = await client.getMe();\n  const { body: { items: playlists } } = await client.getUserPlaylists(userId);\n  const playlistId = await getMonthlyPlaylist()(userId);\n  const { body: { items: tracks } } = await client.getPlaylistTracks(\n    userId,\n    playlistId\n  );\n  if (tracks.find(({ track: { uri } }) => uri === trackUri)) return;\n  await client.addTracksToPlaylist(userId, playlistId, [trackUri]);\n});\n\nconst setVolume = retryWithRefresh(async (percent = 25) => {\n    const client = await spotifyClient();\n    await client.setVolume(percent);\n});\n\nconst pause = retryWithRefresh(async (options = {}) => {\n  const client = await spotifyClient();\n  await client.pause(options);\n});\nconst play = retryWithRefresh(async (options = {}) => {\n  const client = await spotifyClient();\n  await client.play(options);\n});\n\nmodule.exports = {\n  'toggle-device': toggleDevice,\n  play: play,\n  pause: pause,\n  'start-device': startDevice,\n  'set-volume': setVolume,\n  'add-to-monthly-playlist': addToMonthlyPlaylist,\n  'get-monthly-playlist': getMonthlyPlaylist(true),\n};\n"]}