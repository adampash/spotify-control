{"version":3,"sources":["../src/auth.js"],"names":["express","require","openurl","fs","path","fetch","PORT","SPOTIFY_CONTROL_CONF_DIR","homedir","sep","ACCESS_TOKEN_PATH","existsSync","mkdirSync","SPOTIFY_URL","SCOPES","REDIRECT_URL","AUTH_URL","process","env","CLIENT_ID","join","SERVER_AUTH_URL","SERVER_AUTH_HEADERS","Authorization","Buffer","from","CLIENT_SECRET","toString","app","server","objToForm","obj","Reflect","ownKeys","map","key","getLocalToken","JSON","parse","readFileSync","getAccessToken","Promise","resolve","reject","access_token","token","Error","e","console","log","get","req","res","code","query","params","grant_type","redirect_uri","authReq","method","body","headers","json","error","error_description","writeFileSync","stringify","send","close","listen","open","refreshAccessToken","refresh_token","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["const express = require('express');\nconst openurl = require('openurl');\nconst fs = require('fs');\nconst path = require('path');\nconst fetch = require('node-fetch');\n\nconst PORT = 54041;\n\nconst SPOTIFY_CONTROL_CONF_DIR = `${require('os').homedir()}${path.sep}.spotify-control`;\nconst ACCESS_TOKEN_PATH = `${SPOTIFY_CONTROL_CONF_DIR}${path.sep}ACCESS_TOKEN`;\nif (!fs.existsSync(SPOTIFY_CONTROL_CONF_DIR)) {\n  fs.mkdirSync(SPOTIFY_CONTROL_CONF_DIR);\n}\nconst SPOTIFY_URL = 'https://accounts.spotify.com/authorize';\nconst SCOPES = [\n  'user-read-private',\n  'user-read-email',\n  'playlist-read-private',\n  'user-top-read',\n  'user-library-read',\n  'user-read-birthdate',\n  'playlist-modify-private',\n  'user-read-currently-playing',\n  'user-read-recently-played',\n  'user-follow-modify',\n  'user-modify-playback-state',\n  'user-read-playback-state',\n  'user-follow-read',\n  'user-library-modify',\n  'streaming',\n  'playlist-modify-public',\n  'playlist-read-collaborative',\n];\nconst REDIRECT_URL = `http://localhost:${PORT}/auth/callback`;\nconst AUTH_URL = `${SPOTIFY_URL}?client_id=${\n  process.env.CLIENT_ID\n}&redirect_uri=${REDIRECT_URL}&scope=${SCOPES.join(' ')}&response_type=code`;\n\nconst SERVER_AUTH_URL = 'https://accounts.spotify.com/api/token';\nconst SERVER_AUTH_HEADERS = {\n  'Content-Type': 'application/x-www-form-urlencoded',\n  Authorization: `Basic ${Buffer.from(\n    `${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`\n  ).toString('base64')}`,\n};\n\nconst app = express();\nlet server;\n\nconst objToForm = obj =>\n  Reflect.ownKeys(obj)\n    .map(key => `${key}=${obj[key]}`)\n    .join('&');\n\nconst getLocalToken = () => JSON.parse(fs.readFileSync(ACCESS_TOKEN_PATH));\n\nconst getAccessToken = async () =>\n  await new Promise((resolve, reject) => {\n    try {\n      const { access_token: token } = getLocalToken();\n      if (!token) throw new Error(`No token in ${ACCESS_TOKEN_PATH}`);\n      resolve(token);\n    } catch (e) {\n      console.log(`ERORR IN READING TOKEN`, e);\n      app.get('/auth/callback', async (req, res) => {\n        const { code } = req.query;\n        const params = {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: REDIRECT_URL,\n        };\n        const authReq = await fetch(SERVER_AUTH_URL, {\n          method: 'POST',\n          body: objToForm(params),\n          headers: SERVER_AUTH_HEADERS,\n        });\n        const { error, error_description, ...body } = await authReq.json();\n        console.log(`error`, error);\n        console.log(`error_description`, error_description);\n        console.log(`body`, body);\n        if (error) reject(error_description);\n        fs.writeFileSync(ACCESS_TOKEN_PATH, JSON.stringify(body));\n        resolve(body.access_token);\n        res.send('Successfully fetched token. You can close this window.');\n        server.close();\n      });\n\n      server = app.listen(PORT);\n\n      openurl.open(AUTH_URL);\n    }\n  });\n\nconst refreshAccessToken = () =>\n  new Promise(async (resolve, reject) => {\n    try {\n      const { refresh_token } = getLocalToken();\n      if (!refresh_token) return resolve(await getAccessToken());\n      const params = {\n        grant_type: 'refresh_token',\n        refresh_token,\n      };\n      const authReq = await fetch(SERVER_AUTH_URL, {\n        method: 'POST',\n        body: objToForm(params),\n        headers: SERVER_AUTH_HEADERS,\n      });\n      const { error, error_description, ...body } = await authReq.json();\n      if (error) reject(error_description);\n      fs.writeFileSync(\n        ACCESS_TOKEN_PATH,\n        JSON.stringify({ refresh_token, ...body })\n      );\n      resolve(body.access_token);\n    } catch (e) {\n      console.log(`ERROR refreshing token`, e);\n    }\n  });\n\nmodule.exports = {\n  getAccessToken,\n  refreshAccessToken,\n};\n"]}