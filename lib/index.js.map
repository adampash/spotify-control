{"version":3,"sources":["../src/index.js"],"names":["SpotifyWebApi","require","moment","getAccessToken","refreshAccessToken","spotifyApi","REFRESHED_TOKEN","retryWithRefresh","fn","args","loadedFn","e","console","log","spotifyClient","token","setAccessToken","selectDevice","device","client","result","transferMyPlayback","deviceIds","id","play","startDevice","deviceName","response","getMyDevices","body","devices","find","name","toLowerCase","startsWith","process","env","STEREO","is_active","toggleError","toggleDevice","stereo","local","LOCAL","getPlaylist","playlistName","userId","getMe","items","playlists","getUserPlaylists","playlist","getMonthlyPlaylistName","format","getMonthlyPlaylist","monthlyPlaylistName","addToMonthlyPlaylist","item","uri","trackUri","getMyCurrentPlayingTrack","playlistId","tracks","getPlaylistTracks","track","addTracksToPlaylist","setVolume","percent","pause","options","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const SpotifyWebApi = require('spotify-web-api-node');\nconst moment = require('moment');\nconst { getAccessToken, refreshAccessToken } = require('./auth');\n\nconst spotifyApi = new SpotifyWebApi();\nlet REFRESHED_TOKEN = false;\nconst retryWithRefresh = fn => async (...args) => {\n  const loadedFn = () => fn(...args);\n  try {\n    return await loadedFn();\n  } catch (e) {\n    console.log(`ERROR on first try`, e);\n    if (REFRESHED_TOKEN) return;\n    console.log('Trying to refresh token');\n    REFRESHED_TOKEN = true;\n    await refreshAccessToken();\n    return await loadedFn();\n  }\n};\n\nconst spotifyClient = async () => {\n  try {\n    const token = await getAccessToken();\n    await spotifyApi.setAccessToken(token);\n    return spotifyApi;\n  } catch (e) {\n    console.log(`ERROR setting up client`, e);\n  }\n};\n\nconst selectDevice = async device => {\n  try {\n    const client = await spotifyClient();\n    const result = await client.transferMyPlayback({\n      deviceIds: [device.id],\n      play: true,\n    });\n  } catch (e) {\n    console.log(`Error in selectDevice`, e);\n  }\n};\n\nconst startDevice = retryWithRefresh(async deviceName => {\n  try {\n    const client = await spotifyClient();\n    const response = await client.getMyDevices();\n    const {\n      body: { devices },\n    } = response;\n    const device = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(deviceName || process.env.STEREO)\n    );\n    if (device.is_active) return true;\n    selectDevice(device);\n  } catch (toggleError) {\n    console.log(`toggleError`, toggleError);\n    throw toggleError;\n  }\n});\n\nconst toggleDevice = retryWithRefresh(async () => {\n  try {\n    const client = await spotifyClient();\n    const response = await client.getMyDevices();\n    const {\n      body: { devices },\n    } = response;\n    const stereo = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.STEREO)\n    );\n    const local = devices.find(({ name }) =>\n      name.toLowerCase().startsWith(process.env.LOCAL)\n    );\n    selectDevice(local.is_active ? stereo : local);\n  } catch (toggleError) {\n    console.log(`toggleError`, toggleError);\n    throw toggleError;\n  }\n});\n\nconst getPlaylist = retryWithRefresh(\n  async (playlistName = 'Discover Weekly') => {\n    const client = await spotifyClient();\n    const {\n      body: { id: userId },\n    } = await client.getMe();\n    const {\n      body: { items: playlists },\n    } = await client.getUserPlaylists(userId);\n    const playlist = playlists.find(({ name }) => playlistName === name);\n    if (!playlist) {\n      console.log('No playlist with that name exits');\n      console.log('Here are your playlists');\n      console.log(playlists);\n      return;\n    }\n    console.log(playlist.id);\n    return playlist.id;\n  }\n);\n\nconst getMonthlyPlaylistName = () => moment().format('MMMM YYYY');\nconst getMonthlyPlaylist = retryWithRefresh(async userId => {\n  const monthlyPlaylistName = getMonthlyPlaylistName()\n  const id = await getPlaylist(monthlyPlaylistName);\n  return id;\n});\n\nconst addToMonthlyPlaylist = retryWithRefresh(async () => {\n  const client = await spotifyClient();\n  const {\n    body: {\n      item: { uri: trackUri },\n    },\n  } = await client.getMyCurrentPlayingTrack();\n  const {\n    body: { id: userId },\n  } = await client.getMe();\n  const {\n    body: { items: playlists },\n  } = await client.getUserPlaylists(userId);\n  const playlistId = await getMonthlyPlaylist(userId);\n  const {\n    body: { items: tracks },\n  } = await client.getPlaylistTracks(userId, playlistId);\n  if (tracks.find(({ track: { uri } }) => uri === trackUri)) return;\n  await client.addTracksToPlaylist(userId, playlistId, [trackUri]);\n});\n\nconst setVolume = retryWithRefresh(async (percent = 25) => {\n  const client = await spotifyClient();\n  await client.setVolume(percent);\n});\n\nconst pause = retryWithRefresh(async (options = {}) => {\n  const client = await spotifyClient();\n  await client.pause(options);\n});\nconst play = retryWithRefresh(async (options = {}) => {\n  const client = await spotifyClient();\n  await client.play(options);\n});\n\nmodule.exports = {\n  'toggle-device': toggleDevice,\n  play: play,\n  pause: pause,\n  'start-device': startDevice,\n  'set-volume': setVolume,\n  'add-to-monthly-playlist': addToMonthlyPlaylist,\n  'get-monthly-playlist': getMonthlyPlaylist,\n  'get-monthly-playlist-name': getMonthlyPlaylistName,\n  'get-playlist': getPlaylist,\n};\n"]}